<?php
/**
 * Admin related functions.
 *
 * @package MainStem
 */

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly.
}

/**
 * Set hooks related to WP Dashboard.
 */
function mainstem_admin_hooks()
{
    add_action('admin_menu', 'mainstem_plugin_menu');
    add_filter('plugin_action_links_' . plugin_basename(MAINSTEN_MAIN_FILE), 'mainstem_add_settings_link');
}
add_action('plugins_loaded', 'mainstem_admin_hooks');

/**
 * Add the WP Dashboard menu item.
 */
function mainstem_plugin_menu()
{
    add_options_page(
        'MainStem Options',
        'MainStem Plugin',
        'manage_options',
        'mainstem-plugin-settings',
        'mainstem_plugin_options'
    );
}

/**
 * Render the plugin Settings form.
 */
function mainstem_plugin_options()
{
    $nonce_action = 'mainstem_save_api_key';
    $nonce_field = 'mainstem_api_nonce';

// Get orders created through site checkout.
    $args = array(
        'created_via' => 'MainStem',
    );
    $orders = wc_get_orders($args);

    if (isset($_POST[MAINSTEN_API_KEY_OPTION])) {
        if (
            !isset($_POST[$nonce_field]) ||
            !wp_verify_nonce($_POST[$nonce_field], $nonce_action)
        ) {
            ?>
			<div class="error">
				<p><?php _e('Sorry, the nonce verification failed.', 'mainstem');?></p>
			</div>
			<?php
} else {
            $new_api_key = sanitize_text_field($_POST[MAINSTEN_API_KEY_OPTION]);
            update_option(MAINSTEN_API_KEY_OPTION, $new_api_key);

            ?>
			<div class="updated">
				<p><?php _e('Your API Key was saved successfully.', 'mainstem');?></p>
			</div>
			<?php
}
    }

    $opt_val = get_option(MAINSTEN_API_KEY_OPTION);

    ?>
	<form method="post" action="">
		<?php wp_nonce_field($nonce_action, $nonce_field);?>
		<div class="wrap">
			<img src="<?php echo esc_attr(plugin_dir_url(MAINSTEN_MAIN_FILE) . 'MainStemLogo.png'); ?>">
			<h1><?php _e('MainStem WooCommerce Plugin Settings', 'mainstem');?></h1>
			<p><?php _e('Paste your MainStem API key below. If you do not have a key, please contact it@gomainstem.com or call us at 844-623-4084', 'mainstem');?></p>
			<input type="text" class="regular-text ltr" placeholder="<?php esc_attr_e('Enter your API key here...', 'mainstem');?>" name="<?php echo esc_attr(MAINSTEN_API_KEY_OPTION); ?>" value= "<?php echo esc_attr($opt_val); ?>">
			<br><br>
			<input type="submit" class="button button-primary" name="submit" value="<?php esc_attr_e('Save Changes', 'mainstem');?>">
		</div>
	</form>
	<br/><br/>
	<?php
$exampleListTable = new Example_List_Table();
    $exampleListTable->prepare_items();
    ?>
		<div class="wrap">
			<div id="icon-users" class="icon32"></div>
			<h2>Orders Generated By MainStem Platform</h2>
			<?php $exampleListTable->display();?>
		</div>
	<?php
}

/**
 * Add the "Settings" link below the plugin name in WP Dashboard plugins list screen.
 *
 * @param array $links Links already set.
 * @return array
 */
function mainstem_add_settings_link($links)
{
    return array_merge(
        array(
            'settings' => '<a href="' . admin_url('options-general.php?page=mainstem-plugin-settings') . '">' . __('Settings', 'mainstem') . '</a>',
        ),
        $links
    );
}

// WP_List_Table is not loaded automatically so we need to load it in our application
if (!class_exists('WP_List_Table')) {
    require_once ABSPATH . 'wp-admin/includes/class-wp-list-table.php';
}
/**
 * Create a new table class that will extend the WP_List_Table
 */
class Example_List_Table extends WP_List_Table
{
    /**
     * Prepare the items for the table to process
     *
     * @return Void
     */
    public function prepare_items()
    {
        $columns = $this->get_columns();
        $hidden = $this->get_hidden_columns();
        $sortable = $this->get_sortable_columns();
        $data = $this->table_data();
        usort($data, array(&$this, 'sort_data'));
        $perPage = 25;
        $currentPage = $this->get_pagenum();
        $totalItems = count($data);
        $this->set_pagination_args(array(
            'total_items' => $totalItems,
            'per_page' => $perPage,
        ));
        $data = array_slice($data, (($currentPage - 1) * $perPage), $perPage);
        $this->_column_headers = array($columns, $hidden, $sortable);
        $this->items = $data;
    }
    /**
     * Override the parent columns method. Defines the columns to use in your listing table
     *
     * @return Array
     */
    public function get_columns()
    {
        $columns = array(
            'id' => 'WooCommerce Order ID',
            'dateCreated' => 'Date Created',
            'status' => 'Status',
            'total' => 'Order Total',
            'mainstem_order_id' => 'MainStem Order ID',
        );
        return $columns;
    }
    /**
     * Define which columns are hidden
     *
     * @return Array
     */
    public function get_hidden_columns()
    {
        return array();
    }
    /**
     * Define the sortable columns
     *
     * @return Array
     */
    public function get_sortable_columns()
    {
        return array('id' => array('id', false));
    }
    /**
     * Get the table data
     *
     * @return Array
     */
    private function table_data()
    {

        // Get orders created through site checkout.
        $args = array(
            'created_via' => 'MainStem',
        );

        $orders = wc_get_orders($args);

        $data = array();

        foreach ($orders as $orderData) {

            $arraykey = array_search('mainstem_order_id', $orderData->meta_data);

            $metDataObject = $orderData->meta_data[$arraykey];

            $orderID = $metDataObject->value;

            $data[] = array(
                'id' => $orderData->id,
                'dateCreated' => $orderData->order_date,
                'billTo' => $orderData->get_billing_first_name(),
                'total' => $orderData->total,
                'status' => $orderData->status,
                'mainstem_order_id' => "#" . $orderID,
            );
        }

        return $data;
    }
    /**
     * Define what data to show on each column of the table
     *
     * @param  Array $item        Data
     * @param  String $column_name - Current column name
     *
     * @return Mixed
     */
    public function column_default($item, $column_name)
    {
        switch ($column_name) {
            case 'id':
                return "<a href=\"" . get_edit_post_link($item[$column_name]) . "\">#" . $item[$column_name] . " - " . $item["billTo"] . "</a>";
            case 'dateCreated':
            case 'total':
            case 'mainstem_order_id';
            case 'status':
                return $item[$column_name];
            default:
                return print_r($item, true);
        }
    }
    /**
     * Allows you to sort the data by the variables set in the $_GET
     *
     * @return Mixed
     */
    private function sort_data($a, $b)
    {
        // Set defaults
        $orderby = 'id';
        $order = 'desc';
        
        // If orderby is set, use this as the sort column
        if (!empty($_GET['orderby'])) {
            $orderby = $_GET['orderby'];
        }
        // If order is set use this as the order
        if (!empty($_GET['order'])) {
            $order = $_GET['order'];
        }
        $result = strcmp($a[$orderby], $b[$orderby]);
        if ($order === 'asc') {
            return $result;
        }
        return -$result;
    }
}